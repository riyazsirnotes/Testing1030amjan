Java Season 1:

**********************************

Features of Java :


1. Simple

- syntax is simialr to C++
- removed confusing concepts like explicit pointers and Operator Overloading
- memory management done by Garbage Collector in Java 


2. Object Oriented Programming 

OO is a methodology for development and maintance of application.

1. Object
2. Class
3. Encapsulation
4. Polymorphism
5. Inheritance
6. Abstraction

3. Robust :

- Strong mem management 

- exception handling mechanism

- type checking mechanism


4. Secure :


5. Platform Independent :

here Platform means OS (operating System)

6. Architectural Neutral :

Architecture means Processor and RAM 

7. Portable :

Portable means Architecture (means one way of classification)

IBM

Apple

Solaris

WORA :  Write Once Run Anywhere



===========================================================================
Java Installation or JDK Installation 

https://www.oracle.com/in/java/technologies/downloads/


jdk-11.0.18_windows-x64_bin.exe



*********************************************************

Mar 7th Tuesday 


Configuration of Java :


JAVA_HOME

C:\Program Files\Java\jdk-11

path 

C:\Program Files\Java\jdk-11\bin


To check java is configure or not :


open cmd 

give > java -version

java version "11.0.18" 2023-01-17 LTS
Java(TM) SE Runtime Environment 18.9 (build 11.0.18+9-LTS-195)
Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.18+9-LTS-195, mixed mode)


							jdk folders
							
							
			lib						bin					jre
			
			
lib : Library 

predefined stuff (classes and interfaces) to develop java applications



					lib
					 |
			collection of jars ( similar to zip folders)
					 |
			collection of packages ( similar to folder)
					 |
			----------------------------
			|							|
		Classes 				    Interfaces
			|							 |
	------------------			-----------------------	
	|				  |         |					   |
variables			methods  Constants/Fields      abstarct methods




---------------------------------
bin : binaries ( executables)


tools to develop and maintain java  programs or applications



javac : to compile a java programs

java : to run the java program 

------------------------------------------------



jre ( Java Runtime Environment)


							JVM ( Java Virtual Machines)
							
	It's an abstarct machine (having tasks with no body)

								|
			-------------------------------------------------
			|					  |							  |
		CLSS				    EE (Executin Engine)	    GC(Garbage collector)


CLSS : Class Loader Susbsystem 

1.Loading
2.linking
3.initialization 



*********************************************************

Mar 8th Wednesday

						EE (Execution Engine)
						
			Interpreter						JIT compiler
			
											Just In Time 
											
											
Garbage Collector :

Mark :  to identify garbage 

Sweep : to deallocate the memory

-------------------------------------------------------------------------------------
Structure of Java Program :


1. Documentation Section
2. Package Section 
3. Import Section 
4. Class or Interface Section

1. Documentation Section :

Two types of comments:

i) single line comments

starts  // 

ii) Multi line comments

/* ljlkkjk
   lkjhlkjlkj
*/


2. Package Section 


Package means folder 

why package ?

for logical grouping

syntax :

package name;

e.g 

package base;

package test;

package testscripts.regression;


3. Import Section 


import packagename.*;

import packagename.ClassName;

import static packagename.*;



*********************************************************

Mar 9th Thursday

4. Class or Interface Section :



syntax :


access-specifier access-modifier class ClassName
{

//variables

//methods


}


e.g 

public class Hello
{

public static void main(String[] args)
{


}


}

===================================================================
Naming Convention in Java 
===================================================================



collection of packages ( similar to folder)
					 |
			----------------------------
			|							|
		Classes 				    Interfaces
			|							 |
	------------------			-----------------------	
	|				  |         |					   |
variables			methods  Constants/Fields      abstarct methods





packages :  all lower case

e.g java.util

org.openqa.selenium

regression


------------------------------------------

 Classes :  Title Case
 
 e.g   String
 
 Scanner
 
 ChromeDriver
 
 ValidateLogin
 ---------------------------------------------
 Interfaces : Title Case
 
 e.g 
 
 List
 
 WebDriver
 
 MyInter
 
 -----------------------------------------------
 
 variables : Camel Case [ CC = LC(lower case) + TC (Title case) ]
 
 
 x
 
 netSalary
 
 costOfItem
 
 ---------------------------------------------------
 
methods : Camel Case [ CC = LC(lower case) + TC (Title case) ]
 
methods will have ( braces 

main(

println(

nextInt(

getWindowHandle(

-----------------------------------------------

Constants/Fields  :  All Upper Case




PI = 3.14

MAX_LIMIT = 10000


------------------------------------------------

 abstarct methods : Camel Case [ CC = LC(lower case) + TC (Title case) ]
 
 here methods will not have body ends with ;
 
 
*********************************************************

Mar 10th Friday

*********************************************************

===================================================================
Memory Blocks in Java 
===================================================================

1) Class Area / Method Area

.class files 

static variables

static methods

static blocks




2) Heap Area

dynamic memory area

- objects 

- arrays 




3) Java Stack Area (JSA)


- local varibales 

- expressions 

- current running logic 



4) String constant pool Area (SCPA)


String literals will be stored 


String s1="Live Tech";

---------------------------------------------
Datatypes in Java 
----------------------------------------------
					Datatypes in Java 

		Primitive Datatypes					non-primitive Datatypes
		


--------------------------------------------------

Variables in Java 

---------------------------------------------------


syntax :



access-specifier access-modifier data-type variableName = some value;

e.g

public int netSalary = 100000;

left hand side is called varibale declaration

if some value is assigned in right hand side then it is called initialization.

here you can this way also


access-specifier access-modifier data-type variableName;

variableName = some value;

public int netSalary;

netSalary=10000;

								Variables
								
		
		Local					instance					static
		
		
Local Variables :

Local Variables are the variables declared inside a method.


- where memory is allocated ?

Java Stack Area

- when memory is allocated ?

during runtime and method is called

- what is calling style ?

just  variableName

- lifetime or scope of local varibale

till end of method

Note :


VariablesDemo2.java:11: error: variable x might not have been initialized
System.out.println("value of x is "+x);
                                    ^
1 error

It's the responsibity or duty of programmer or developer to intialize the local varibales



*********************************************************

Mar 11th Saturday

*********************************************************


IDE ( Integrated Development Environments)

Eclipse 

IntelliJ Idea

Net beans 

https://www.eclipse.org/downloads/

2021-09


Click on "Download Package"

Then

Click on "Eclipse 2021-09 (4.21)" under "More Download"

under 

Eclipse IDE for Enterprise Java and Web Developers

Click on "Windows x86_64"

a zip file will get downloaded 

just unzip the file , you will find a folder "eclipse"


just open the eclipse folder 

you will find eclipse appliction , just open that application or .exe




--------------------------------------------------

Variables in Java  (Cont ..)

---------------------------------------------------


2. Instance Variables

def :  varibales which are declared inside a class but outside of method

Multiple markers at this line
	- Cannot make a static reference to the non-static field y
	- TODO Auto-generated method stub

- when memory is allocated ?

when you create an instance or objects

syntax for creating an object ?

ClassName objectName=new ClassName();

- where memory is allocated ?

in Heap Area

- what is calling style ?

objectName.variableName ;

- lifetime or scope of local varibale

till last of usage of object 



-------------------------------------------------------


*********************************************************

Mar 13th Monday

*********************************************************


3. Static Variables

if we have something "common" and "shared accross"  , we use static 

def : varibales which are declared inside a class but outside of method having keyword static

- when memory is allocated ?

while compilation

- where memory is allocated ?

Class Area / Method Area

- what is calling style ?

ClassName.variableName

- lifetime or scope of local varibale

through out the program 


--------------------------------------------------
Methods in Java  
---------------------------------------------------

						Methods in Java  
						
			
			non-static methods				Static Methods
			
Method :

set of instructions to accomplish some task 

uses/advanatges  of methods :

- reduces redundancy of code
- improves code clarity
- resuabilty
- debugging of code will be easy


Syntax of method :

access-specifier access-modifier return-type methodName(arguments or paramters)
{

// statements

return statement;

}


*********************************************************

Mar 14th Tuesday

*********************************************************


--------------------------------------------------
Methods in Java   (Cont ..)
---------------------------------------------------


Scanner Class :

java.util


next() : String 
nextInt() : int 
==========================
next(String)
next(Pattern)
nextBigDecimal()
nextBigInteger()
nextBigInteger(int)
nextBoolean()
nextByte()
nextByte(int)
nextDouble()
nextFloat()
nextInt(int)
nextLine()
nextLong()
nextLong(int)
nextShort()
nextShort(int)
=============================


*********************************************************

Mar 15th Wednesday

*********************************************************


OOPs (Object Oriented Programming):

e.g : java , C++ etc ..

"Simula" - first OOP lang

"Small Talk" - First Truley OOP lang 

means every thing is object here 


Older approach :

Procedure Oriented Programming

e.g Basic , COBOL , C etc


-----------------------------------------

Object :

Any thing that exists is an Object.

It can be living thing , non-living thing or  anything .

e.g 

Dog , Car , Marker , bank account number etc

Object have 3 Characteristics:

1. State : it represents the data that describes an object

e.g Object is Marker 

state  - length 12cm , Shape Cylindrical , color - white 

2. Behaviour : represents actions/taks that object can perform 

e.g Object is dog 

behaviour : barking , eating , sleeping 

3. Identity : a unique ID given to identify the Object 

used by JVM


-------------------------------------------

Class :

A blueprint or a template through which we create an object is called Class.

Class is a logical entity .

Class consists of Variables and Methods .

=================================
Object Creation Techniques
==================================

1. using new operator 

ClassName objectName=new ClassName();

2. using Static Factory Method : (SFM)

ClassName objectName=ClassName.methodName();
		
3. using non-static Factory Method :

ClassName object1=new ClassName1();

ClassName object2=object1.method1();


XSSFWorkbook wb=new XSSFWorkbook();

XSSFSheet ws=wb.getSheet("sheet1");


*********************************************************

Mar 16th Thursday

*********************************************************





4. using clone method 

ClassName object1=new ClassName1();

ClassName object2=object1.clone();


5. using literals 

ClassName objectName=value;

String s1="Live Tech";

6. using Deserialization 

no syntax 

JVM will use this 


----------------------------------
Encapsulation
-----------------------------------
Encapsulation in Java is a process of wrapping code and data together into a single unit,

 for example, a capsule which is mixed of several medicines.


The field Bank.balance is not visible


*********************************************************

Mar 17th Friday 

*********************************************************


10:49:50

2:3:55

02:03:55

PrintStream :

println => will print and moves the cursor to next line
print  ==> will print and cursor stays in same 

*
* *
* * * 
* * * *
* * * * *


printf == > came from old languages (c lang)


format ==> to format the values


this : 

when we have local varibales same as instance variables ,
local variables dominate and will not change or effect Instance variables.

To overcome this , we will use "this" keyword 

this is key cum opeator 

this is non-static variable

this is used to reference the current calling object reference

????????????????????????????????

Create a Class called Date


here use 3 variables

int date , year ;

String month;

use getters and setters to display the date 

Expected :

17-MAR-2023

02-OCT-1869


??????????????????????????????????????????????????


*********************************************************

Mar 21st Tuesday 

*********************************************************


------------------------
Polymorphism
------------------------


The method add(int, int) in the type Sum is not applicable for the arguments (double, double)

The method add(int, int) in the type Sum is not applicable for the arguments (long, long)


Poly means Many

Morph means forms

								Polymorphism
								    |
					_______________________________				
					|					           |
				Static							 Dynamic   (this will be after inheritance topic)
				  or								or
				Compile time					 Runtime 
				  or								 or
				Early Binding					 Late Binding
				

Binding means linking or mapping 

Method Signature :

   method name + arguments 
   
In Compile time : method name will be same 

In Runtime  : Method Signature will be same 


?????????????????????????????????????????

Create a Class Clock

and use setters methods ( use polymorphism means method overloding or same method name )

setClock(int hr)

setClock(int hr,int min)

setClock(int hr,int min,int sec)

getClock ==> to display the clock


???????????????????????????????????????????
				

*********************************************************

Mar 23rd Thursday 

*********************************************************


getClock ==> to display the clock

9

09:00:00

9 ,15

09:15:00

9,15,55

09:15:55



------------------------------
Constructor
-------------------------------

It's a method having same Name as Class Name (Case Sentitive)


Rules of Constructor :

- Constructor name should be same as Class Name
- Constructor doesn't have return type 

Interview Question :

what happens if we declare return type ?
nothing will happen , that method will be no longer a Constructor
it will be treated as Normal or Concrete method


- Constructor doesn't have access-modifier

Illegal modifier for the constructor in type Sum; only public, protected & private are permitted


- Explicit calling of Constructor is not possible

========================
Constructor Overloading
========================
									Constructor's
							
			default	Constructor						paramterized constructor's


??????????????????????????????????????????????????

Generate Aadhar number 

either 

986336

or 

5213 1425 3256

hint : 

	public static void main(String[] args) {
		
		System.out.println((int)(Math.random()*1000000));
	}


????????????????????????????????????????????????????



*********************************************************

Mar 24th Friday 

*********************************************************

-----------------------------
Inheritance
-----------------------------

Inheritance in Java is a mechanism 
in which one object acquires all the properties and behaviors of a parent object.


public class Marks extends Student

here Marks is Child / Derived / Sub Class

    Student   Parent / Base / Super 


*********************************************************

Mar 25th Saturday 

*********************************************************


Super : super is a keyword cum operator

super is used to refer Current calling object's Parent refrence



-----------------------------
Abstraction
-----------------------------

							Abstraction
							

			Abstract Class						Interfaces
			
			0 to 100 % 							100 %
			
			
Abstract Method : a method having no body and having abstarct keyword


syntax : 

access-specifier abstarct return-type methodName(arguments);



*********************************************************

Mar 27th Monday 

*********************************************************


abstract class A
{
m1 abstarct

m2 abstarct

m3 concrete
}


 class B extends A
{

m1  Concrete

m2 {}


}

-------------------------------
Interface
-------------------------------

Collection of Constants/Fields and Abstract methods

syntax :

access-specifier access-modifier interface InterfaceName
{

//Constants/Fields

syntax :

access-specifier static final data-type ConstantName = value;

public static final double PI = 3.14;


//Abstarct Methods


syntax : 

access-specifier abstarct return-type methodName(arguments);



}




**********************************************
Apr 8th Saturday
**********************************************

Flow control or Control Flow in Java


1) Decission making or Selection statements

i) if else 

syntax :

if(condition)
{

//body

}
else
{

// code when condition is false

}


if only

if else

if else if else 

if else if else if ...... else

------------------
To scan or to take values during runtime  we use methods in Scanner class

java.util


if we want to take integer value

nextInt(): int

System.out.println("Hello World");

System is class present in java.lang

out is an predfined object of PrintStream(java.io) having static keyword



next() : String
next(String) : String
next(Pattern) : String
nextBoolean() : boolean
nextByte() : byte
nextByte(int) : byte
nextDouble() : double
nextFloat() : float
nextInt() : int
nextInt(int) : int
nextLine() : String
nextLong() : long
nextLong(int) : long
nextShort() : short
nextShort(int) : short


ii) switch

input can be byte , short ,int , char , String (from java 1.5)

switch(input)
{

case a : // action
         break;
		 
case b : // action 
		 break;
		 
		 |
		 
		 |
default : // default action
         		 
         




}


?????????????????????????

for 1030 batch

use Switch case to launch different browser 

chrome

firefox

edge

????????????????????????????????


------------------------------------
Loops
-------------------------------------

for loop :


for(initialization ; condition ; increment or decrement)
{

//body or statements

}


while loop :

while(condition)
{
//body or statements
increment or decrement;


}



**********************************************
Apr 10th Monday
**********************************************


---------------------------------------
Java Season -2 
---------------------------------------


Arrays :


it's a group of simliar data-type elements having fixed length

		10		20		30		40		50		60
a		0		1		2		3		4		5
		a[0]	a[1]	a[2]	a[3]	a[4]	a[5]


syntax :

access-specifier modifier data-type arrayName[]={element1,element2...elementn};

int a[]={10,20,30,40,50,60};


syntax : using new 

access-specifier modifier data-type arrayName[]=new data-type[size];


Disadvantages :

1) Arrays always store similar or homogeneous data-type's

2) Arrays are fixed length
   no growable nature
   
3) predefined structures or methods not defined in arrays 

--------------------------------------
Collection
--------------------------------------

								Collection(I)
								
								
			List(I)					Queue(I)				Set(I)							


Collection(I) :


add(E) : boolean 

this method will add the Element  based on collection 


addAll(Collection<? extends E>) : boolean

this method will add Collection 


clear() : void

this will clear the items /Elements


contains(Object) : boolean

to check the avialability of element in collection ..similar to search


equals(Object) : boolean


isEmpty(): boolean

to check collection is empty

iterator():Iterator

remove(Object): boolean


to remove item / element in collection 


size(): int

will get size or no of items /elements in collections



**********************************************
Apr 11th Tuesday
**********************************************


List(I) methods 


get(int) : E

get will return the Element present in i th index


indexOf(Object) : int



ArrayList (C)

ArrayList()
ArrayList(int)
ArrayList(Collection<? extends E>)


initial Capaacity =10


new capacity = 3/2 (CC )+ 1


for-each loop or enhanced for loop :


syntax :


for(Datatype someVariable:collectionreference or array ref)
{

//use someVariable
}

			
-------------------
Set(I)
--------------------


iterator has 2 methods

hasNext(): boolean
will check wheter element is present in next level 

next():Element
- it retrives the element
- moves the cursor /iterator reference to next level




**********************************************
Apr 12th Wednesday
**********************************************

ArrayList                 			vs                      HashSet
1. Elements are stored 								1. Elements are stored based on 
 indexed based 											Hashing technique
 means  insertion order is							    means insertion order is 
 preserved												not preserved

2. duplicated are allowed							2. duplicates are not allowed

3. 												    3. 
Q) 	what happends when duplicated added ?			Q) what happends when duplicated added ?
nothing , elemnts will get added					   nothing , elemnts will not get added
add method will true								   add method will true



------------------------------
Exception
------------------------------


Exception in thread "main" java.lang.ArithmeticException: / by zero
	at apr12th.ExceptionDemo1.main(ExceptionDemo1.java:20)


try catch

try block -> where you enter risky work

catch block  --> to print exception trace or error message or user frinendly message

finally block --> to excute some mandate code like closing of JDBC connection or closing of file



try - catch

try -  catch - catch 

try - finally
								Exception
								
			checked Exception				UnChecked Exception
			


























